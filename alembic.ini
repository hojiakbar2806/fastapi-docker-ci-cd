# Bitta ma'lumotlar bazasi konfiguratsiyasi.

[alembic]
# Migratsiya skriptlariga yo'l.
# Windowsda ham osga xos yo'lni ta'minlash uchun oldinga slashlar (/) ishlating
script_location = migrations

# Migratsiya fayl nomlarini yaratishda ishlatiladigan shablon; default qiymati %%(rev)s_%%(slug)s
# Agar fayllarni sana va vaqt bilan qo'shishni xohlasangiz, quyidagi satrni oching
file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# Agar mavjud bo'lsa, sys.path yo'li, sys.path ga qo'shiladi.
# default qiymati joriy ishchi papka.
prepend_sys_path = .

# Migratsiya faylida sanani chiqarishda ishlatiladigan vaqt zonasi
# agar ko'rsatilsa, python>=3.9 yoki backports.zoneinfo kutubxonasi kerak.
# Har qanday zaruriy deps, `alembic[tz]` pip talablari satriga qo'shilishi bilan o'rnatilishi mumkin
# string qiymat ZoneInfo() ga uzatiladi
# mahalliy vaqt uchun bo'sh qoldiring
# timezone =

# "slug" maydoni uchun qo'llaniladigan maksimal belgilarning uzunligi
# truncate_slug_length = 40

# 'revision' buyruÄŸi paytida muhiti bajarish uchun 'true' ga o'rnatilsin,
# autogenerate dan qat'i nazar
# revision_environment = false

# .pyc va .pyo fayllarini qayd etish uchun 'true' ga o'rnatilsin,
# agar manba .py fayli mavjud bo'lmasa, versiyalar / katalogida
# sourceless = false

# versiya joylashuvi belgilanishi; bu default
# migrations/versions.  Bir nechta versiya
# kataloglarini ishlatishda, dastlabki reviziyalar
# --version-path bilan aniqlanishi kerak.
# Bu erda ishlatiladigan yo'l ajratgichi, "version_path_separator" dan quyida
# ko'rsatilgan ajratgichdir.
# version_locations = %(here)s/bar:%(here)s/bat:migrations/versions

# versiya yo'l ajratgichi; Yuqorida aytib o'tilganidek, bu belgilar
# version_locations ni ajratish uchun ishlatiladi. Yangi alembic.ini fayllaridagi default
# qiymat "os" bo'lib, os.pathsep dan foydalanadi.
# Agar ushbu kalit butunlay o'tkazib yuborilsa,
# eski xulq-atvoriga qaytadi va bo'shliqlar va/yoki vergullar bo'yicha
# ajratiladi. Valid qiymatlar:
#
# version_path_separator = :
# version_path_separator = ;
# version_path_separator = space
version_path_separator = os  # os.pathsep dan foydalaning. Yangi loyihalar uchun default konfiguratsiya.

# har bir "version_locations" katalogida manba fayllarini
# qidirish uchun 'true' ga o'rnatilsin
# Alembic versiyasi 1.10 da yangi
# recursive_version_locations = false

# version fayllari yozilganda ishlatiladigan chiqish kodlash
# output_encoding = utf-8

sqlalchemy.url = driver://user:pass@localhost/dbname


[post_write_hooks]
# post_write_hooks yangi yaratilgan revision skriptlarida ishlaydigan
# skriptlar yoki Python funksiyalarini belgilaydi. Qo'shimcha ma'lumot va misollar uchun
# hujjatlarni ko'ring

# "black" yordamida formatlash - "black" entrypointga qarshi console_scripts runnerini ishlating
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# "ruff" yordamida lint qilish - exec runnerini ishlating, binarni ishga tushirish
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = --fix REVISION_SCRIPT_FILENAME

# Logging konfiguratsiyasi
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
