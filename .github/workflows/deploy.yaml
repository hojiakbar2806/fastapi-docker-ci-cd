name: Build, Push, and Deploy

on:
  push:
    branches:
      - main

jobs:
  checkout:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

  setup:
    runs-on: ubuntu-latest
    needs: checkout

    steps:
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.12

      - name: Restore pip cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          ls -l # Faylni tekshirish uchun
          if [ -f requirements.txt ]; then \
            pip install -r requirements.txt; \
          else \
            echo "requirements.txt fayli mavjud emas"; \
            exit 1; \
          fi

  build_docker:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: false
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fasapit-docker:latest

  push_docker:
    runs-on: ubuntu-latest
    needs: build_docker

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fasapit-docker:latest

  connect_server:
    runs-on: ubuntu-latest
    needs: push_docker

    steps:
      - name: Deploy to AWS EC2 (Connect)
        env:
          AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
          AWS_EC2_IP: ${{ secrets.AWS_EC2_IP }}
        run: |
          chmod 600 $AWS_SSH_KEY
          ssh -i $AWS_SSH_KEY ubuntu@$AWS_EC2_IP echo "Connected successfully"

  pull_server:
    runs-on: ubuntu-latest
    needs: connect_server

    steps:
      - name: Deploy to AWS EC2 (Pull Docker image)
        env:
          AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
          AWS_EC2_IP: ${{ secrets.AWS_EC2_IP }}
        run: |
          chmod 600 $AWS_SSH_KEY
          ssh -i $AWS_SSH_KEY ubuntu@$AWS_EC2_IP << 'EOF'
            cd /path/to/your/project
            docker-compose pull
          EOF

  restart_server:
    runs-on: ubuntu-latest
    needs: pull_server

    steps:
      - name: Deploy to AWS EC2 (Restart Docker containers)
        env:
          AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
          AWS_EC2_IP: ${{ secrets.AWS_EC2_IP }}
        run: |
          chmod 600 $AWS_SSH_KEY
          ssh -i $AWS_SSH_KEY ubuntu@$AWS_EC2_IP << 'EOF'
            cd /path/to/your/project
            docker-compose up -d
          EOF
