name: Build and Deploy to AWS

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**/*.md"

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    env:
      APP_ENV: development
      DOCKER_BUILDKIT: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment-specific .env file
        run: |
          if [[ ${{ env.APP_ENV }} == 'production' ]]; then
            cp .env.production .env
          else
            cp .env.development .env
          fi
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Set up Docker Buildx
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap

      - name: Build, Push Docker Image, and Cache
        run: |
          docker buildx build \
            --cache-to type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.CONTAINER_NAME }}-cache \
            --cache-from type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.CONTAINER_NAME }}-cache \
            --tag ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.CONTAINER_NAME }}:latest \
            --push .

      - name: Deploy to AWS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ~/fastapi-docker
            cd ~/fastapi-docker

            # Pull new Docker image
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.CONTAINER_NAME }}:latest

            # Stop and remove existing container if exists
            sudo docker stop my_container || true
            sudo docker rm my_container || true

            # Run Docker container
            sudo docker run -d --name my_container --env-file .env ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.CONTAINER_NAME }}:latest
